package org.example;

import java.sql.SQLException;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è,
 * –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
 * —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞ {@link NoteDatabaseService}.
 * <p>
 * –ö–ª–∞—Å—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
 * (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É") –±–æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 * –∏ –æ–∂–∏–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 *
 * @since 1.0
 */
public class LogicBot {

    /**
     * –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.
     */
    private final NoteService noteService;


    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
     */
    public LogicBot() {
        this.noteService = new NoteDatabaseService();
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π/–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é NoteDatabaseService,
     * –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∫–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤. –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.
     *
     * @param noteService —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–º–µ—Ç–æ–∫
     */
    public LogicBot(NoteService noteService) {
        this.noteService = noteService;
    }

    /**
     * –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞.
     */
    private enum State {
        /**
         * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
         */
        NONE,

        /**
         * –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏.
         */
        AWAITING_NOTE_TEXT,

        /**
         * –û–∂–∏–¥–∞–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
         */
        AWAITING_NOTE_ID_FOR_EDIT,

        /**
         * –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–º–µ—Ç–∫–∏.
         */
        AWAITING_NEW_TEXT_FOR_EDIT,

        /**
         * –û–∂–∏–¥–∞–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
         */
        AWAITING_NOTE_ID_FOR_DELETE,

        /**
         * –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ ("–¥–∞" –∏–ª–∏ "–Ω–µ—Ç").
         */
        AWAITING_DELETE_CONFIRMATION,

        /**
         * –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–æ–∫.
         */
        AWAITING_TAG_FOR_FILTER,

        /**
         * –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—ë —Ç–µ–≥–æ–≤.
         */
        AWAITING_NOTE_ID_FOR_TAG_EDIT,

        /**
         * –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏.
         */
        AWAITING_NEW_TAGS_INPUT,
        AWAITING_ACTION_ON_NOTE
    }

    /**
     * –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
     */
    private final Map<Long, State> userStates = new HashMap<>();

    /**
     * –ö–∞—Ä—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏, —Å –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–∏).
     */
    private final Map<Long, Integer> userPendingNoteId = new HashMap<>();

    public class ButtonLabels {
        public static final String NEW_NOTE = "–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞";
        public static final String DELETE_NOTE = "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É";
        public static final String NOTES_LIST = "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫";
        public static final String FILTER_BY_TAG = "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥—É";
        public static final String VIEW_TAGS = "–¢–µ–≥–∏";
        public static final String EDIT_TAGS = "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏";
        public static final String EDIT_NOTE = "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É";
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
     * <p>
     * –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–µ—Ç–æ–¥ –ª–∏–±–æ –æ–∂–∏–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏, –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Ç–µ–≥),
     * –ª–∏–±–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥.
     * </p>
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—ã—á–Ω–æ Telegram ID)
     * @param input  —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    public String handleCommand(long userId, String input) {
        String trimmedInput = input.trim();
        if ("–û—Ç–º–µ–Ω–∞".equalsIgnoreCase(trimmedInput) || "/cancel".equalsIgnoreCase(trimmedInput)) {
            userStates.remove(userId);
            userPendingNoteId.remove(userId);
            return "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.";
        }
        State state = userStates.getOrDefault(userId, State.NONE);

        try {
            switch (state) {
                case AWAITING_NOTE_TEXT:
                    noteService.addNote(userId, input);
                    userStates.remove(userId);
                    List<String> tags = extractTagsFromText(input);
                    if (!tags.isEmpty()) {
                        return "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üè∑Ô∏è –¢–µ–≥: " + String.join(", ", tags);
                    }
                    return "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!";

                case AWAITING_NOTE_ID_FOR_EDIT:
                    return handleEditNoteSelection(userId, input);

                case AWAITING_NEW_TEXT_FOR_EDIT:
                    return handleNoteTextUpdate(userId, input);

                case AWAITING_NOTE_ID_FOR_DELETE:
                    return handleDeleteNoteSelection(userId, input);

                case AWAITING_DELETE_CONFIRMATION:
                    return handleDeleteConfirmation(userId, input);

                case AWAITING_TAG_FOR_FILTER:
                    return handleTagFilter(userId, input);

                case AWAITING_NOTE_ID_FOR_TAG_EDIT:
                    return handleEditTagSelection(userId, input);

                case AWAITING_NEW_TAGS_INPUT:
                    return handleTagUpdate(userId, input);

                case AWAITING_ACTION_ON_NOTE:
                    return handleNoteActionSelection(userId, input);

                default:
                    return handleMainMenu(userId, input);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ç–µ–≥–æ–≤).
     * <p>
     * –ï—Å–ª–∏ –≤–≤–æ–¥ ‚Äî —á–∏—Å–ª–æ, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∑–∞–º–µ—Ç–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –µ—ë –¥–∞–Ω–Ω—ã–µ.
     * –ï—Å–ª–∏ –≤–≤–æ–¥ ‚Äî –∫–æ–º–∞–Ω–¥–∞ –¥–µ–π—Å—Ç–≤–∏—è (¬´–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏¬ª, ¬´–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É¬ª),
     * –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
     * </p>
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param input  –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –¥–µ–π—Å—Ç–≤–∏—è)
     * @return –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @throws SQLException –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    private String handleEditNoteSelection(long userId, String input) throws SQLException {
        if (isNumeric(input)) {
            int noteIndex = Integer.parseInt(input);
            Integer realNoteId = noteService.getNoteIdByIndex(userId, noteIndex);
            if (realNoteId != null) {
                userPendingNoteId.put(userId, realNoteId);
                String text = noteService.getNoteTextById(userId, realNoteId);
                List<String> tags = ((NoteDatabaseService) noteService).getTagsForNote(realNoteId);
                String tagStr = tags.isEmpty() ? "–Ω–µ—Ç" : String.join(" ", tags);

                userStates.put(userId, State.AWAITING_ACTION_ON_NOTE);

                return String.format(
                        "–¢–µ–∫—Å—Ç: %s\n–¢–µ–≥–∏: %s\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n[–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç]\n[–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏]\n[–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É]",
                        text, tagStr
                );
            } else {
                return "–ó–∞–º–µ—Ç–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
            }

        } else if (input.equals(ButtonLabels.EDIT_TAGS)) {
            Integer noteId = userPendingNoteId.get(userId);
            if (noteId != null) {
                userStates.put(userId, State.AWAITING_NEW_TAGS_INPUT);
                return "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #—Ä–∞–±–æ—Ç–∞ #–≤–∞–∂–Ω–æ–µ) –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤.";
            }
        } else if (input.equals(ButtonLabels.DELETE_NOTE)) {
            Integer noteId = userPendingNoteId.get(userId);
            if (noteId != null) {
                String text = noteService.getNoteTextById(userId, noteId);
                userStates.put(userId, State.AWAITING_DELETE_CONFIRMATION);
                return "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É:\n¬´" + text + "¬ª?\n–û—Ç–≤–µ—Ç—å—Ç–µ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.";
            }
        }
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.";
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param input  –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–µ
     * @throws SQLException –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    private String handleNoteTextUpdate(long userId, String input) throws SQLException {
        Integer noteId = userPendingNoteId.get(userId);
        if (noteId == null) {
            userStates.remove(userId);
            return "–û—à–∏–±–∫–∞: –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.";
        }
        noteService.updateNote(userId, noteId, input);
        userStates.remove(userId);
        userPendingNoteId.remove(userId);
        return "–ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!";
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param input  –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–æ–π
     * @throws SQLException –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    private String handleDeleteNoteSelection(long userId, String input) throws SQLException {
        if (isNumeric(input)) {
            int userIndex = Integer.parseInt(input);
            Integer realId = noteService.getNoteIdByIndex(userId, userIndex);
            if (realId != null) {
                String text = noteService.getNoteTextById(userId, realId);
                userPendingNoteId.put(userId, realId);
                userStates.put(userId, State.AWAITING_DELETE_CONFIRMATION);
                return "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É:\n¬´" + text + "¬ª?\n–û—Ç–≤–µ—Ç—å—Ç–µ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.";
            } else {
                return "–ó–∞–º–µ—Ç–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.";
            }
        }
        return "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.";
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param input  ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    private String handleDeleteConfirmation(long userId, String input) {
        if ("–¥–∞".equalsIgnoreCase(input.trim())) {
            Integer delId = userPendingNoteId.get(userId);
            if (delId != null) {
                try {
                    noteService.deleteNote(userId, delId);
                } catch (SQLException e) {
                    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.";
                }
            }
            userStates.remove(userId);
            userPendingNoteId.remove(userId);
            return "–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.";
        } else if ("–Ω–µ—Ç".equalsIgnoreCase(input.trim())) {
            userStates.remove(userId);
            userPendingNoteId.remove(userId);
            return "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.";
        } else {
            return "–û—Ç–≤–µ—Ç—å—Ç–µ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.";
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–µ–≥—É.
     * <p>
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ¬´–í—Å–µ –∑–∞–º–µ—Ç–∫–∏¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
     * </p>
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param input  —Ç–µ–≥ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ ¬´–í—Å–µ –∑–∞–º–µ—Ç–∫–∏¬ª
     * @return —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–≥–æ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
     * @throws SQLException –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    private String handleTagFilter(long userId, String input) throws SQLException {
        if ("–í—Å–µ –∑–∞–º–µ—Ç–∫–∏".equals(input)) {
            return showAllNotes(userId);
        }
        String tag = input.trim().toLowerCase();
        if (!tag.startsWith("#")) {
            tag = "#" + tag;
        }
        List<String> notes = ((NoteDatabaseService) noteService).getNotesByTag(userId, tag);
        if (notes.isEmpty()) {
            return "–ó–∞–º–µ—Ç–æ–∫ —Å —Ç–µ–≥–æ–º " + tag + " –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
        }
        return String.join("\n", notes);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—ë —Ç–µ–≥–æ–≤.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param input  –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏
     * @return –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     * @throws SQLException –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    private String handleEditTagSelection(long userId, String input) throws SQLException {
        if (isNumeric(input)) {
            int noteIndex = Integer.parseInt(input);
            Integer realNoteId = noteService.getNoteIdByIndex(userId, noteIndex);
            if (realNoteId != null) {
                userPendingNoteId.put(userId, realNoteId);
                userStates.put(userId, State.AWAITING_NEW_TAGS_INPUT);
                return "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #–ø—Ä–æ–¥—É–∫—Ç—ã #—Å–ø–∏—Å–æ–∫) –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤.";
            } else {
                return "–ó–∞–º–µ—Ç–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç.";
            }
        }
        return "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.";
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–≥–∏ —É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏.
     * <p>
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏, —É–¥–∞–ª—è—è –∏–∑ –Ω–µ–≥–æ —Å—Ç–∞—Ä—ã–µ —Ç–µ–≥–∏,
     * –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –∏–∑ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * </p>
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param input  –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
     * @throws SQLException –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    private String handleTagUpdate(long userId, String input) throws SQLException {
        Integer noteId = userPendingNoteId.get(userId);
        if (noteId == null) {
            userStates.remove(userId);
            return "–û—à–∏–±–∫–∞: –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.";
        }

        String currentText = noteService.getNoteTextById(userId, noteId);
        if (currentText == null) {
            userStates.remove(userId);
            userPendingNoteId.remove(userId);
            return "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
        }

        List<String> newTags = input.trim().isEmpty() ? Collections.emptyList() : extractTagsFromText(input);
        String textWithoutTags = removeTagsFromText(currentText);
        String newText = newTags.isEmpty() ? textWithoutTags : (textWithoutTags + " " + String.join(" ", newTags)).trim();

        noteService.updateNote(userId, noteId, newText);

        List<String> oldTags = ((NoteDatabaseService) noteService).getTagsForNote(noteId);
        if (newTags.isEmpty()) {
            userStates.remove(userId);
            userPendingNoteId.remove(userId);
            return "–í—Å–µ —Ç–µ–≥–∏ —É–¥–∞–ª–µ–Ω—ã!";
        }

        Set<String> oldSet = new HashSet<>(oldTags);
        Set<String> newSet = new HashSet<>(newTags);
        Set<String> removed = new HashSet<>(oldSet);
        removed.removeAll(newSet);
        Set<String> added = new HashSet<>(newSet);
        added.removeAll(oldSet);

        StringBuilder response = new StringBuilder("–¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
        if (!removed.isEmpty()) {
            response.append(" –£–¥–∞–ª—ë–Ω(—ã): ").append(String.join(", ", removed));
        }
        if (!added.isEmpty()) {
            response.append(" –î–æ–±–∞–≤–ª–µ–Ω(—ã): ").append(String.join(", ", added));
        }
        if (newSet.size() == 1 && removed.isEmpty() && added.isEmpty()) {
            response.append(" –ù–æ–≤—ã–π —Ç–µ–≥: ").append(newTags.getFirst());
        }

        userStates.remove(userId);
        userPendingNoteId.remove(userId);
        return response.toString();
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param input  –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @throws SQLException –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    private String handleMainMenu(long userId, String input) throws SQLException {
        switch (input) {
            case "/start":
                return "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.";

            case ButtonLabels.NEW_NOTE:
                userStates.put(userId, State.AWAITING_NOTE_TEXT);
                return "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.";

            case ButtonLabels.NOTES_LIST:
                return showAllNotes(userId);

            case ButtonLabels.FILTER_BY_TAG:
                List<String> tagsWithCounts = ((NoteDatabaseService) noteService).getAllUserTagsWithCounts(userId);
                if (tagsWithCounts.isEmpty()) {
                    return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤.";
                }
                String tagList = String.join("\n", tagsWithCounts);
                userStates.put(userId, State.AWAITING_TAG_FOR_FILTER);
                return "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞:\n" + tagList + "\n–í—Å–µ –∑–∞–º–µ—Ç–∫–∏";

            case ButtonLabels.VIEW_TAGS:
                List<String> allTags = ((NoteDatabaseService) noteService).getAllUserTagsWithCounts(userId);
                if (allTags.isEmpty()) {
                    return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤.";
                }
                return "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:\n" + String.join("\n", allTags);

            case ButtonLabels.EDIT_NOTE:
                return promptNoteSelection(userId);

            default:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.";
        }
    }
    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
     * @throws SQLException –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    private String showAllNotes(long userId) throws SQLException {
        List<String> notes = noteService.getAllNotes(userId);
        if (notes.isEmpty()) {
            return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.";
        }
        return IntStream.range(0, notes.size())
                .mapToObj(i -> (i + 1) + ". " + notes.get(i))
                .collect(Collectors.joining("\n"));
    }

    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±–æ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–º–µ—Ç–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞
     * @throws SQLException –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    private String promptNoteSelection(long userId) throws SQLException {
        List<String> notes = noteService.getAllNotes(userId);
        if (notes.isEmpty()) {
            return "–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫.";
        }
        String list = IntStream.range(0, notes.size())
                .mapToObj(i -> (i + 1) + ". " + notes.get(i))
                .collect(Collectors.joining("\n"));
        userStates.put(userId, State.AWAITING_NOTE_ID_FOR_EDIT);
        return "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:" + "\n" + list;
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {@code #—Ç–µ–≥}.
     * <p>
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {@code #} + –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ.
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –¥—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª—è—é—Ç—Å—è.
     * </p>
     *
     * @param text —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
     * @return —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
     */
    private List<String> extractTagsFromText(String text) {
        List<String> tags = new ArrayList<>();
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("#[\\p{L}0-9_]+");
        java.util.regex.Matcher matcher = pattern.matcher(text);
        while (matcher.find()) {
            tags.add(matcher.group().toLowerCase());
        }
        return new ArrayList<>(new LinkedHashSet<>(tags));
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏.
     * <p>
     * –£–¥–∞–ª—è–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—É {@code #—Ç–µ–≥}, –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ–±–µ–ª—ã.
     * </p>
     *
     * @param text –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
     * @return —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–µ–≥–æ–≤
     */
    private String removeTagsFromText(String text) {
        return text.replaceAll("#[\\p{L}0-9_]+", "").trim().replaceAll("\\s+", " ");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.
     *
     * @param str —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return {@code true}, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ; {@code false} –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
     */
    private boolean isNumeric(String str) {
        if (str == null || str.isEmpty()) return false;
        try {
            Integer.parseInt(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–æ–π.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param input  –∫–æ–º–∞–Ω–¥–∞ –¥–µ–π—Å—Ç–≤–∏—è
     * @return –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @throws SQLException –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    private String handleNoteActionSelection(long userId, String input) throws SQLException {
        if (input.equals("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç")) {
            userStates.put(userId, State.AWAITING_NEW_TEXT_FOR_EDIT);
            Integer noteId = userPendingNoteId.get(userId);
            if (noteId == null) {
                userStates.remove(userId);
                return "–û—à–∏–±–∫–∞: –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.";
            }
            String current = noteService.getNoteTextById(userId, noteId);
            return "–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏: ¬´" + current + "¬ª –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.";
        }
        if (input.equals(ButtonLabels.EDIT_TAGS)) {
            userStates.put(userId, State.AWAITING_NEW_TAGS_INPUT);
            return "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #—Ä–∞–±–æ—Ç–∞ #–≤–∞–∂–Ω–æ–µ) –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤.";
        }
        if (input.equals(ButtonLabels.DELETE_NOTE)) {
            Integer noteId = userPendingNoteId.get(userId);
            if (noteId == null) {
                userStates.remove(userId);
                return "–û—à–∏–±–∫–∞: –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.";
            }
            String text = noteService.getNoteTextById(userId, noteId);
            userStates.put(userId, State.AWAITING_DELETE_CONFIRMATION);
            return "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É:\n¬´" + text + "¬ª?\n–û—Ç–≤–µ—Ç—å—Ç–µ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.";
        }
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.";
    }
}